{"version":3,"sources":["img/cat-694730_640.jpg","img/cat-2934720_640.jpg","img/kitty-2948404_640.jpg","../../src/context/AccordionContext.js","../../src/components/Accordion.jsx","../../src/context/AccordionSectionContext.js","../../src/components/AccordionSection.jsx","../../src/components/AccordionSectionHeader.jsx","../../src/components/AccordionSectionTextContent.jsx","../../src/hooks/useCollapse.js","../../src/hooks/useExpand.js","../../src/components/AccordionSideContentContainer.jsx","../../src/components/AccordionSideContent.jsx","App.js","index.js"],"names":["module","exports","AccordionContext","createContext","openSections","changeSectionStatus","sideContentMap","addSideContentForSection","persistentSideContentMap","Accordion","children","className","allowMultipleOpen","allowAllCollapsed","useState","setOpenSections","setSideContentMap","addOpenSection","useCallback","clear","newOpenSections","removeOpenSection","uuid","value","PropTypes","bool","AccordionSectionContext","isOpen","AccordionSection","initiallyOpen","useRef","uuidv4","firstRenderRef","useContext","useEffect","AccordionSectionHeader","type","onClick","AccordionSectionTextContent","elRef","opRef","heightSetter","heightStyle","setHeightStyle","contentRef","el","ongoingOp","collapse","requestAnimationFrame","opId","expand","listen","e","useExpand","style","height","ref","AccordionSideContentContainer","fullContent","Object","sideContent","wrappedSideContent","key","AccordionSideContent","string","isRequired","App","src","cat1Img","alt","cat2Img","cat3Img","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89819708.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-694730_640.efc4ec2d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-2934720_640.99ca1299.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kitty-2948404_640.461b4ded.jpg\";","import { createContext } from 'react';\n\nconst AccordionContext = createContext({\n  openSections: [],\n  changeSectionStatus: () => {},\n  sideContentMap: {},\n  addSideContentForSection: () => {},\n});\n\nexport default AccordionContext;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionContext from '../context/AccordionContext';\nlet persistentSideContentMap = {};\n\n/** Outermost container of the accordion. Manages the state of sections which is shared through the\n * AccordionContext. Can contain (at any depth) AccordionSection and AccordionSideContentContainer\n * components. */\nfunction Accordion({ children, className, allowMultipleOpen, allowAllCollapsed }) {\n  // control state of content: which sections are open & what site content is displayed\n  const [openSections, setOpenSections] = useState([]);\n  const [sideContentMap, setSideContentMap] = useState(persistentSideContentMap);\n  // update side content map for next render iteration\n  persistentSideContentMap = { ...sideContentMap };\n\n  // callbacks to open/close sections\n  const addOpenSection = useCallback(\n    (uuid, clear = false) => {\n      const newOpenSections = clear ? [] : openSections.slice();\n      newOpenSections.push(uuid);\n      setOpenSections(newOpenSections);\n    },\n    [openSections]\n  );\n\n  const removeOpenSection = useCallback(\n    (remUuid) => {\n      setOpenSections(openSections.filter((uuid) => uuid !== remUuid));\n    },\n    [openSections]\n  );\n\n  const changeSectionStatus = useCallback(\n    (uuid) => {\n      if (openSections.includes(uuid)) {\n        if (allowAllCollapsed || openSections.length > 1) {\n          removeOpenSection(uuid);\n        }\n      } else {\n        addOpenSection(uuid, !allowMultipleOpen);\n      }\n    },\n    [addOpenSection, allowAllCollapsed, allowMultipleOpen, openSections, removeOpenSection]\n  );\n\n  // callback to let AccordionSideContent fill children into AccordionSideContent container\n  const addSideContentForSection = useCallback(\n    (sideContent, uuid) => {\n      // prevent dependency cycle\n      if (sideContentMap[uuid] === sideContent) {\n        return;\n      }\n      persistentSideContentMap[uuid] = sideContent;\n      setSideContentMap(persistentSideContentMap);\n    },\n    [sideContentMap]\n  );\n\n  return (\n    <AccordionContext.Provider\n      value={{\n        openSections,\n        changeSectionStatus,\n        sideContentMap,\n        addSideContentForSection,\n      }}\n    >\n      <div className={`accordion ${className}`}>{children}</div>\n    </AccordionContext.Provider>\n  );\n}\n\nAccordion.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  allowMultipleOpen: PropTypes.bool,\n  allowAllCollapsed: PropTypes.bool,\n};\n\nAccordion.defaultProps = {\n  className: '',\n  allowMultipleOpen: false,\n  allowAllCollapsed: false,\n};\n\nexport default Accordion;\n","import { createContext } from 'react';\n\nconst AccordionSectionContext = createContext({\n  uuid: undefined,\n  isOpen: false,\n});\n\nexport default AccordionSectionContext;\n","import React, { useContext, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport AccordionContext from '../context/AccordionContext';\nimport AccordionSectionContext from '../context/AccordionSectionContext';\n\n/** Container for the content of one accordion section. Passes in an AccordionSectionContext the\n * unique ID of this section and information whether the section is currently regarded as 'open'\n * or 'closed'. Components which may consume this context are AccordionSectionHeader and\n * AccordionSectionTextContent components. To be contained somewhere beneath the main Accordion\n * component */\nfunction AccordionSection({ children, className, initiallyOpen }) {\n  // generate a unique uuid for this section which is reused on every render\n  const uuidRef = useRef(uuidv4());\n  const uuid = uuidRef.current;\n\n  // check if section is considered open (passed in item context)\n  const firstRenderRef = useRef(true);\n  const { openSections, changeSectionStatus } = useContext(AccordionContext);\n  // second condition here allows initial render of open section without transition effects\n  const isOpen = openSections.includes(uuid) || (firstRenderRef.current && initiallyOpen);\n\n  // after first render: mark section as open if necessary\n  useEffect(() => {\n    if (initiallyOpen) {\n      changeSectionStatus(uuid);\n    }\n    firstRenderRef.current = false;\n  }, []);\n\n  return (\n    <AccordionSectionContext.Provider value={{ isOpen, uuid }}>\n      <div className={`accordion-section ${className}`}>{children}</div>\n    </AccordionSectionContext.Provider>\n  );\n}\n\nAccordionSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  initiallyOpen: PropTypes.bool,\n};\n\nAccordionSection.defaultProps = {\n  className: '',\n  initiallyOpen: false,\n};\n\nexport default AccordionSection;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionContext from '../context/AccordionContext';\nimport AccordionSectionContext from '../context/AccordionSectionContext';\n\n/** Button to switch open/closed state of an accordion section. To be contained somewhere beneath an\n * AccordionSection component. */\nfunction AccordionSectionHeader({ children, className }) {\n  const { changeSectionStatus } = useContext(AccordionContext);\n  const { uuid } = useContext(AccordionSectionContext);\n\n  return (\n    <button\n      className={`accordion-heading ${className}`}\n      type=\"button\"\n      onClick={() => changeSectionStatus(uuid)}\n    >\n      {children}\n    </button>\n  );\n}\n\nAccordionSectionHeader.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nAccordionSectionHeader.defaultProps = {\n  className: '',\n};\n\nexport default AccordionSectionHeader;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionSectionContext from '../context/AccordionSectionContext';\nimport useExpand from '../hooks/useExpand';\nimport useCollapse from '../hooks/useCollapse';\n\n/** The text within an accordion section which is expanded/collapsed on trigger of a related\n * AccordionSectionHeader element. To be contained somewhere beneath an AccordionSection\n * component. */\nfunction AccordionSectionTextContent({ children, className }) {\n  const { isOpen } = useContext(AccordionSectionContext);\n  const [heightStyle, setHeightStyle] = useState(isOpen ? null : '0px');\n\n  // track content DOM element to read its scroll height\n  const contentRef = useRef();\n  const el = contentRef.current;\n\n  // track any ongoing operations by uuid to avoid race condition\n  const ongoingOp = useRef(null);\n\n  // function to collapse the section from its open state\n  const collapse = useCollapse(contentRef, ongoingOp, setHeightStyle);\n\n  // function to expand the section from its collapsed state\n  const expand = useExpand(contentRef, ongoingOp, setHeightStyle);\n\n  // perform transition every time open status changes\n  useEffect(() => {\n    if (el) {\n      if (!isOpen) {\n        collapse();\n      } else {\n        expand();\n      }\n    }\n  }, [collapse, el, expand, isOpen]);\n\n  return (\n    <div\n      style={{ height: heightStyle }}\n      ref={contentRef}\n      className={`accordion-text-content ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nAccordionSectionTextContent.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nAccordionSectionTextContent.defaultProps = {\n  className: '',\n};\n\nexport default AccordionSectionTextContent;\n","import { useCallback } from 'react';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * Hook to trigger JS functions to set off CSS based height transitions for a section text collapse.\n *\n * @param elRef - React ref to the DOM element containing the section text\n * @param opRef - React ref to track currently active operation on the section text\n * @param heightSetter {function} - function to commit height to state\n * @returns {function} - callback to collapse the section text\n */\nfunction useCollapse(elRef, opRef, heightSetter) {\n  return useCallback(() => {\n    const el = elRef.current;\n    if (!el || el.clientHeight === 0) {\n      return;\n    }\n    requestAnimationFrame(() => {\n      // assign unique id to this operation\n      const opId = uuid();\n      // eslint-disable-next-line no-param-reassign\n      opRef.current = opId;\n      // assign an explicit height to section to make transition possible\n      heightSetter(`${el.scrollHeight}px`);\n      requestAnimationFrame(() => {\n        // prevent race condition: only proceed if no other operation was called after initial setup\n        if (opRef.current === opId) {\n          // trigger transition\n          heightSetter('0px');\n        }\n      });\n    });\n  }, [elRef, heightSetter, opRef]);\n}\n\nexport default useCollapse;\n","import { useCallback } from 'react';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * Hook to trigger JS functions to set off CSS based height transitions for a section text\n * expansion.\n *\n * @param elRef - React ref to the DOM element containing the section text\n * @param opRef - React ref to track currently active operation on the section text\n * @param heightSetter {function} - function to commit height to state\n * @returns {function} - callback to expand the section text\n */\nfunction useExpand(elRef, opRef, heightSetter) {\n  return useCallback(() => {\n    const el = elRef.current;\n    if (!el || el.clientHeight !== 0) {\n      return;\n    }\n    // assign unique id to this operation\n    const opId = uuid();\n    // eslint-disable-next-line no-param-reassign\n    opRef.current = opId;\n    // trigger transition\n    heightSetter(`${el.scrollHeight}px`);\n    // after transition: remove fixed height to allow section to scale by its content. This WILL be\n    // triggered on the end of ANY transition, necessitating the opId check below\n    el.addEventListener('transitionend', function listen(e) {\n      el.removeEventListener('transitionend', listen);\n      // prevent race condition: only proceed if no other operation was called after initial setup\n      if (e.type === 'transitionend' && opRef.current === opId) {\n        heightSetter(null);\n      }\n    });\n  }, [elRef, heightSetter, opRef]);\n}\n\nexport default useExpand;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionContext from '../context/AccordionContext';\n\n/** Container to render the current side content, marked as 'active' or 'inactive' depending on\n * whether the section is considered 'open' or not. To be contained somewhere beneath the main\n * Accordion component. */\nfunction AccordionSideContentContainer({ className }) {\n  const { openSections, sideContentMap } = useContext(AccordionContext);\n  const fullContent = [];\n  Object.entries(sideContentMap).forEach(([uuid, sideContent]) => {\n    const wrappedSideContent = openSections.includes(uuid) ? (\n      <div key={uuid} className=\"side-content active\">\n        {sideContent}\n      </div>\n    ) : (\n      <div key={uuid} className=\"side-content inactive\">\n        {sideContent}\n      </div>\n    );\n    fullContent.push(wrappedSideContent);\n  });\n\n  return <div className={`side-content-container ${className}`}>{fullContent}</div>;\n}\n\nAccordionSideContentContainer.propTypes = {\n  className: PropTypes.string,\n};\n\nAccordionSideContentContainer.defaultProps = {\n  className: '',\n};\n\nexport default AccordionSideContentContainer;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionContext from '../context/AccordionContext';\nimport AccordionSectionContext from '../context/AccordionSectionContext';\n\n/** Content belonging to an accordion section to be shown 'at the side' of the accordion, i.e., not\n * within the accordion but at a possibly unrelated place. To be contained within an\n * AccordionSection component. The component is itself rendered within the\n * AccordionSideContentContainer component, which is to be inserted as a child of the Accordion\n * component itself. */\nfunction AccordionSideContent({ children }) {\n  const { addSideContentForSection } = useContext(AccordionContext);\n  const { uuid } = useContext(AccordionSectionContext);\n  // subscribe the side content to the main accordion state\n  useEffect(() => {\n    const sideContent = <div className=\"side-content\">{children}</div>;\n    addSideContentForSection(sideContent, uuid);\n  }, [children]);\n  return null;\n}\n\nAccordionSideContent.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AccordionSideContent;\n","import React from 'react';\nimport cat1Img from './img/cat-694730_640.jpg';\nimport cat2Img from './img/cat-2934720_640.jpg';\nimport cat3Img from './img/kitty-2948404_640.jpg';\n\nimport {\n  Accordion,\n  AccordionSection,\n  AccordionSectionHeader,\n  AccordionSectionTextContent,\n  AccordionSideContentContainer,\n  AccordionSideContent,\n} from 'react-side-content-accordion';\nimport 'react-side-content-accordion/dist/example.css';\n\nconst App = () => {\n  return (\n    <Accordion>\n      <div className=\"accordion-sections\">\n        <AccordionSection initiallyOpen>\n          <AccordionSectionHeader>Section 1</AccordionSectionHeader>\n          <AccordionSectionTextContent>\n            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor\n            invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et\n            accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n            sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n            sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna\n            aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n            rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n            amet.\n          </AccordionSectionTextContent>\n          <AccordionSideContent>\n            <img src={cat1Img} alt=\"cat\" />\n          </AccordionSideContent>\n        </AccordionSection>\n        <AccordionSection>\n          <AccordionSectionHeader>Section 2</AccordionSectionHeader>\n          <AccordionSectionTextContent>\n            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor\n            invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et\n            accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n            sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n            sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna\n            aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n            rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n            amet.\n          </AccordionSectionTextContent>\n          <AccordionSideContent>\n            <img src={cat2Img} alt=\"cat\" />\n          </AccordionSideContent>\n        </AccordionSection>\n        <AccordionSection>\n          <AccordionSectionHeader>Section 3</AccordionSectionHeader>\n          <AccordionSectionTextContent>\n            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor\n            invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et\n            accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata\n            sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\n            sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna\n            aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea\n            rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n            amet.\n          </AccordionSectionTextContent>\n          <AccordionSideContent>\n            <img src={cat3Img} alt=\"cat\" />\n          </AccordionSideContent>\n        </AccordionSection>\n      </div>\n      <AccordionSideContentContainer />\n    </Accordion>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}